/***************************************************************************************************
 *  Project  : mathematical functions for numerical computing
 *  Function : 
 *--------------------------------------------------------------------------------------------------
 *  Author   : Yao-Chong SUN
 *  Company  : SUSTECH, CHINA.
 *--------------------------------------------------------------------------------------------------
 *  Copyright 2020-2021. You should have received a copy of the GNU
 *  General Public License v3.0 along with ndg2d.
 *  If not, see <http://www.gnu.org/licenses/>.
***************************************************************************************************/
#include<iostream>
#include<cmath>
#include"tool_memory.h"
#include"tool_math.h"
//--------------------------------------------------------------------------------------------------
constexpr static const double pi=4.0*atan(1.0);
constexpr static const double delta=1.0e-10;
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
void errorMessage(std::string msg)
{
  std::cout<<"Error in func_math.cpp"<<std::endl;
  if(msg=="rmatInv01") std::cout<<"  the order value N in rmatInv is less than 1."<<std::endl;
  if(msg=="rmatInv02") std::cout<<"  the input Matrix A in rmatInv is noninvertible."<<std::endl;
  exit(0);
}
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
float rmatDet(float**A,int n)
{
   
}
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
float rmatDet(float**A,int n)
{
   
}
//--------------------------------------------------------------------------------------------------
void rmatLU(float**A,float**L,float**U,int n)
{
   
}
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
void rmatLInv(float**A, float**B, bint N)
void rmatUInv(float**A, float**B, bint N)
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
void rmatInv(float**A, float**B, bint N)
{ 
  if(N<=0) errorMessage("rmatInv01");

  if(N==1 and if(fabs(A[0][0])>delta)
  {
    B[0][0]=1.0/A[0][0];
    return B;
  } else
  if(N==1 and if(fabs(A[0][0])<delta)
  {
    errorMessge("rmatInv02");
  }
}
//--------------------------------------------------------------------------------------------------

//**************************************************************************************************
// vim: ft=cpp:nu:nowrap
